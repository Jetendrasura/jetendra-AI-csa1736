from collections import deque

class State:
    def __init__(self, missionaries, cannibals, boat_position):
        self.missionaries = missionaries
        self.cannibals = cannibals
        self.boat_position = boat_position

    def is_valid(self):
        if self.missionaries < 0 or self.cannibals < 0 or self.missionaries > 3 or self.cannibals > 3:
            return False
        if self.cannibals > self.missionaries and self.missionaries > 0:
            return False
        if 3 - self.cannibals > 3 - self.missionaries and 3 - self.missionaries > 0:
            return False
        return True

    def is_goal(self):
        return self.missionaries == 0 and self.cannibals == 0 and self.boat_position == 0

    def __eq__(self, other):
        return self.missionaries == other.missionaries and self.cannibals == other.cannibals and self.boat_position == other.boat_position

    def __hash__(self):
        return hash((self.missionaries, self.cannibals, self.boat_position))

    def __str__(self):
        return f"({self.missionaries}, {self.cannibals}, {self.boat_position})"

def get_neighbors(state):
    neighbors = []
    if state.boat_position == 0:
        for i in range(1, 3 + 1):
            new_state = State(state.missionaries - i, state.cannibals, 1)
            if new_state.is_valid():
                neighbors.append(new_state)
    else:
        for i in range(1, 3 + 1):
            new_state = State(state.missionaries + i, state.cannibals, 0)
            if new_state.is_valid():
                neighbors.append(new_state)
    return neighbors

def bfs_missionaries_cannibals():
    initial_state = State(3, 3, 0)
    queue = deque([initial_state])
    visited = set()
    visited.add(initial_state)
    parent = {initial_state: None}

    while queue:
        current_state = queue.popleft()

        if current_state.is_goal():
            path = []
            while current_state is not None:
                path.append(current_state)
                current_state = parent[current_state]
            path.reverse()
            return path
        
        for neighbor in get_neighbors(current_state):
            if neighbor not in visited:
                visited.add(neighbor)
                parent[neighbor] = current_state
                queue.append(neighbor)
    
    return None

def print_solution(path):
    if not path:
        print("No solution found.")
    else:
        print("Solution found with", len(path) - 1, "moves:")
        for state in path:
            print(state)

# Solve the problem
path = bfs_missionaries_cannibals()
print_solution(path)
