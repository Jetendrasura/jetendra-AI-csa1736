def is_safe(board, row, col):
    """ Check if it's safe to place a queen at board[row][col] """
    # Check row on left side
    for i in range(col):
        if board[row][i] == 1:
            return False
    
    # Check upper diagonal on left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    
    # Check lower diagonal on left side
    for i, j in zip(range(row, len(board), 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    
    return True

def solve_n_queens(board, col):
    """ Solve the N-Queens problem recursively """
    # Base case: If all queens are placed
    if col >= len(board):
        return True
    
    for i in range(len(board)):
        if is_safe(board, i, col):
            board[i][col] = 1  # Place queen
            if solve_n_queens(board, col + 1):
                return True
            board[i][col] = 0  # Backtrack

    return False

def print_board(board):
    """ Print the board """
    for row in board:
        print(row)

def solve_8_queens():
    """ Solve the 8-Queens problem """
    board = [[0 for _ in range(8)] for _ in range(8)]
    if solve_n_queens(board, 0):
        print("Solution found:")
        print_board(board)
    else:
        print("No solution exists")

# Example usage:
solve_8_queens()
