from heapq import heappop, heappush
from collections import deque
from itertools import chain

class PuzzleState:
    def __init__(self, board, moves=0, previous=None):
        self.board = board
        self.size = len(board)
        self.empty_pos = self.find_empty_pos()
        self.moves = moves
        self.previous = previous
    
    def __eq__(self, other):
        return self.board == other.board
    
    def __hash__(self):
        return hash(tuple(chain(*self.board)))
    
    def __lt__(self, other):
        return (self.moves + self.manhattan()) < (other.moves + other.manhattan())
    
    def find_empty_pos(self):
        for i in range(self.size):
            for j in range(self.size):
                if self.board[i][j] == 0:
                    return (i, j)
    
    def manhattan(self):
        total_distance = 0
        for i in range(self.size):
            for j in range(self.size):
                if self.board[i][j] != 0:
                    value = self.board[i][j] - 1
                    target_row = value // self.size
                    target_col = value % self.size
                    total_distance += abs(i - target_row) + abs(j - target_col)
        return total_distance
    
    def neighbors(self):
        i, j = self.empty_pos
        for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            ni, nj = i + di, j + dj
            if 0 <= ni < self.size and 0 <= nj < self.size:
                new_board = [row[:] for row in self.board]
                new_board[i][j], new_board[ni][nj] = new_board[ni][nj], new_board[i][j]
                yield PuzzleState(new_board, self.moves + 1, self)
    
    def is_goal(self):
        goal_board = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
        return self.board == goal_board
    
    def traceback_path(self):
        path = []
        current_state = self
        while current_state:
            path.append(current_state.board)
            current_state = current_state.previous
        return path[::-1]

def solve_8_puzzle(initial_state):
    initial_state = PuzzleState(initial_state)
    heap = []
    heappush(heap, initial_state)
    visited = set()
    visited.add(initial_state)
    
    while heap:
        current = heappop(heap)
        
        if current.is_goal():
            return current.traceback_path()
        
        for neighbor in current.neighbors():
            if neighbor not in visited:
                heappush(heap, neighbor)
                visited.add(neighbor)
    
    return None

# Example usage:
initial_board = [
    [1, 2, 3],
    [4, 0, 6],
    [7, 5, 8]
]

solution = solve_8_puzzle(initial_board)
if solution:
    print("Solution found in", len(solution) - 1, "moves:")
    for step in solution:
        print(step)
else:
    print("No solution found.")

    
            
   
